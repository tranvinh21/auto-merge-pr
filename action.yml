name: 'Auto Merge PR Action'
description: 'Automatically merges pull requests when they are created or on manual trigger'
author: 'tranvinh21'
branding:
  icon: 'git-merge'
  color: 'green'

inputs:
  token:
    description: 'GitHub token or Personal Access Token (PAT) with permissions to merge PRs'
    required: true
  pr_number:
    description: 'Pull request number to merge. If not provided and triggered by a PR event, uses the triggering PR'
    required: false
  merge_method:
    description: 'Merge method to use: merge, squash, or rebase'
    required: false
    default: 'merge'

outputs:
  merge_success:
    description: 'True if the PR was successfully merged'
  merge_sha:
    description: 'The SHA of the merge commit if successful'
  merge_error:
    description: 'Error message if the merge failed'

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Git identity
      shell: bash
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"

    - name: Auto-merge pull request
      id: merge
      shell: bash
      run: |
        # Determine PR number based on input or event
        if [ ! -z "${{ inputs.pr_number }}" ]; then
          PR_NUMBER="${{ inputs.pr_number }}"
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
        else
          echo "‚ùå Error: No PR number provided and not triggered by a PR event"
          exit 1
        fi

        echo "Processing PR #$PR_NUMBER"

        # Get PR details
        PR_DETAILS=$(curl -s -H "Authorization: token ${{ inputs.token }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")

        # Check if PR exists
        PR_STATE=$(echo "$PR_DETAILS" | jq -r '.state')
        if [ "$PR_STATE" = "null" ] || [ -z "$PR_STATE" ]; then
          echo "‚ùå Error: Pull request #$PR_NUMBER not found or API returned invalid data"
          echo "API Response: $(echo "$PR_DETAILS" | jq -r '.message')"
          exit 1
        fi

        # Extract PR information
        MERGEABLE=$(echo "$PR_DETAILS" | jq -r '.mergeable')
        MERGEABLE_STATE=$(echo "$PR_DETAILS" | jq -r '.mergeable_state')
        PR_TITLE=$(echo "$PR_DETAILS" | jq -r '.title')
        PR_HEAD=$(echo "$PR_DETAILS" | jq -r '.head.ref')
        PR_BASE=$(echo "$PR_DETAILS" | jq -r '.base.ref')
        PR_DRAFT=$(echo "$PR_DETAILS" | jq -r '.draft')

        echo "PR #$PR_NUMBER: '$PR_TITLE'"
        echo "Branches: $PR_HEAD ‚Üí $PR_BASE"
        echo "PR Status: State=$PR_STATE, Draft=$PR_DRAFT, Mergeable=$MERGEABLE, MergeableState=$MERGEABLE_STATE"
        
        # Skip draft PRs
        if [ "$PR_DRAFT" = "true" ]; then
          echo "‚è≠Ô∏è Skipping PR #$PR_NUMBER as it's in draft state"
          echo "merge_success=false" >> $GITHUB_OUTPUT
          echo "merge_error=PR is in draft state" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Force GitHub to recalculate the mergeable status by updating the PR
        echo "Triggering mergeable status recalculation..."
        curl -s -X PUT -H "Authorization: token ${{ inputs.token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" \
          -d "{\"title\":\"$PR_TITLE\"}" > /dev/null

        # Wait for mergeable status if it's null (GitHub is still calculating)
        if [ "$MERGEABLE" = "null" ]; then
          echo "Waiting for GitHub to calculate mergeable status..."
          MAX_ATTEMPTS=10
          for i in $(seq 1 $MAX_ATTEMPTS); do
            sleep 5
            PR_DETAILS=$(curl -s -H "Authorization: token ${{ inputs.token }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
            MERGEABLE=$(echo "$PR_DETAILS" | jq -r '.mergeable')
            MERGEABLE_STATE=$(echo "$PR_DETAILS" | jq -r '.mergeable_state')
            echo "Attempt $i/$MAX_ATTEMPTS: Mergeable=$MERGEABLE, State=$MERGEABLE_STATE"
            if [ "$MERGEABLE" != "null" ]; then
              break
            fi
          done
        fi

        # If mergeable is still null after waiting, try to proceed anyway if state is clean
        if [ "$MERGEABLE" = "null" ] && [ "$MERGEABLE_STATE" = "clean" ]; then
          echo "‚ö†Ô∏è Warning: GitHub did not calculate mergeable status, but state is 'clean'. Attempting merge anyway."
          MERGEABLE="true"
        fi

        if [ "$MERGEABLE" = "true" ] || [ "$MERGEABLE_STATE" = "clean" ]; then
          echo "PR is mergeable, proceeding with merge"
          
          # Set merge method based on input
          MERGE_METHOD="${{ inputs.merge_method }}"
          echo "Using merge method: $MERGE_METHOD"
          
          # Try to merge using GitHub's API
          echo "Sending merge request to GitHub API..."
          MERGE_RESPONSE=$(curl -X PUT -H "Authorization: token ${{ inputs.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/merge" \
            -d "{\"commit_title\":\"[Auto-merge] $PR_TITLE\",\"commit_message\":\"Auto-merged PR #$PR_NUMBER\",\"merge_method\":\"$MERGE_METHOD\"}")
          
          MERGE_SUCCESS=$(echo "$MERGE_RESPONSE" | jq -r '.merged')
          
          if [ "$MERGE_SUCCESS" = "true" ]; then
            MERGE_SHA=$(echo "$MERGE_RESPONSE" | jq -r '.sha')
            echo "‚úÖ PR #$PR_NUMBER has been auto-merged successfully"
            echo "Merged commit: $MERGE_SHA"
            echo "merge_success=true" >> $GITHUB_OUTPUT
            echo "merge_sha=$MERGE_SHA" >> $GITHUB_OUTPUT
            
            # Add comment to PR to indicate it was auto-merged
            curl -s -X POST -H "Authorization: token ${{ inputs.token }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments" \
              -d "{\"body\":\"ü§ñ This PR was automatically merged by Auto Merge PR Action.\"}"
          else
            MERGE_ERROR=$(echo "$MERGE_RESPONSE" | jq -r '.message')
            echo "‚ùå Failed to merge PR: $MERGE_ERROR"
            echo "Full response: $MERGE_RESPONSE"
            echo "merge_success=false" >> $GITHUB_OUTPUT
            echo "merge_error=$MERGE_ERROR" >> $GITHUB_OUTPUT
            
            # Provide troubleshooting information
            if [[ "$MERGE_ERROR" == *"Required status check"* ]] || [[ "$MERGE_ERROR" == *"required status"* ]]; then
              echo "This appears to be related to required status checks. Make sure all required checks have passed."
            elif [[ "$MERGE_ERROR" == *"review"* ]]; then
              echo "This appears to be related to required reviews. Make sure all required reviews have been approved."
            elif [[ "$MERGE_ERROR" == *"protected branch"* ]]; then
              echo "This appears to be related to branch protection rules."
            elif [[ "$MERGE_ERROR" == *"permission"* ]] || [[ "$MERGE_ERROR" == *"Permission"* ]]; then
              echo "This appears to be a permission issue. Make sure your token has sufficient permissions."
              echo "The token needs 'repo' scope for private repositories."
            fi
            
            # Add comment to PR with failure info
            curl -s -X POST -H "Authorization: token ${{ inputs.token }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments" \
              -d "{\"body\":\"‚ö†Ô∏è Auto-merge failed: $MERGE_ERROR\n\nPlease check the workflow logs for more details.\"}"
            
            exit 1
          fi
        else
          echo "‚ùå PR is not mergeable at this time."
          echo "Status: $MERGEABLE_STATE"
          echo "merge_success=false" >> $GITHUB_OUTPUT
          echo "merge_error=PR is not mergeable ($MERGEABLE_STATE)" >> $GITHUB_OUTPUT
          
          # Provide more detailed information
          FAILURE_REASON=""
          if [ "$MERGEABLE_STATE" = "behind" ]; then
            FAILURE_REASON="The PR branch is behind the base branch and needs to be updated."
          elif [ "$MERGEABLE_STATE" = "dirty" ]; then
            FAILURE_REASON="The PR has merge conflicts that need to be resolved."
          elif [ "$MERGEABLE_STATE" = "blocked" ]; then
            FAILURE_REASON="The PR is blocked by branch protection rules."
          elif [ "$MERGEABLE_STATE" = "unstable" ]; then
            FAILURE_REASON="The PR has failing status checks."
          else
            FAILURE_REASON="The PR cannot be merged in its current state."
          fi
          
          # Add comment to PR with failure info
          curl -s -X POST -H "Authorization: token ${{ inputs.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments" \
            -d "{\"body\":\"‚ö†Ô∏è Auto-merge failed: $FAILURE_REASON\n\nState: $MERGEABLE_STATE\"}"
          
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.token }} 